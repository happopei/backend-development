apiVersion: v1
kind: Namespace
metadata:
  name: app-demo
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: app-demo
type: Opaque
stringData:
  DB_USER: appuser
  DB_PASS: supersecret
  DB_NAME: appdb
  JWT_SECRET: change-me
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
  namespace: app-demo
data:
  NODE_ENV: "production"
  DB_HOST: "postgres"
  DB_PORT: "5432"
  REDIS_HOST: "redis"
  REDIS_PORT: "6379"
---
# Postgres (ephemeral) - Deployment + Service
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: app-demo
spec:
  selector: { app: postgres }
  ports:
    - name: pg
      port: 5432
      targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: app-demo
spec:
  replicas: 1
  selector: { matchLabels: { app: postgres } }
  template:
    metadata: { labels: { app: postgres } }
    spec:
      containers:
        - name: postgres
          image: postgres:16
          ports: [{ containerPort: 5432, name: pg }]
          env:
            - name: POSTGRES_DB
              valueFrom: { secretKeyRef: { name: app-secrets, key: DB_NAME } }
            - name: POSTGRES_USER
              valueFrom: { secretKeyRef: { name: app-secrets, key: DB_USER } }
            - name: POSTGRES_PASSWORD
              valueFrom: { secretKeyRef: { name: app-secrets, key: DB_PASS } }
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          readinessProbe:
            tcpSocket: { port: 5432 }
            initialDelaySeconds: 5
            periodSeconds: 5
      volumes:
        - name: pgdata
          emptyDir: {}   # ephemeral for demo
---
# Redis (ephemeral) - Deployment + Service
apiVersion: v1
kind: Service
metadata:
  name: redis
  namespace: app-demo
spec:
  selector: { app: redis }
  ports:
    - name: redis
      port: 6379
      targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
  namespace: app-demo
spec:
  replicas: 1
  selector: { matchLabels: { app: redis } }
  template:
    metadata: { labels: { app: redis } }
    spec:
      containers:
        - name: redis
          image: redis:7
          args: ["--save", "", "--appendonly", "no"]  # ephemeral
          ports: [{ containerPort: 6379, name: redis }]
          readinessProbe:
            tcpSocket: { port: 6379 }
            initialDelaySeconds: 3
            periodSeconds: 5
---
# API - Service + Deployment
apiVersion: v1
kind: Service
metadata:
  name: api
  namespace: app-demo
spec:
  selector: { app: api }
  ports:
    - name: http
      port: 80
      targetPort: 3000
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: api
  namespace: app-demo
spec:
  replicas: 2
  selector: { matchLabels: { app: api } }
  template:
    metadata: { labels: { app: api } }
    spec:
      securityContext:
        runAsNonRoot: true
      containers:
        - name: api
          image: your-dockerhub-user/nest-api:latest
          ports: [{ containerPort: 3000, name: http }]
          envFrom:
            - configMapRef: { name: app-config }
            - secretRef:    { name: app-secrets }
          env:
            - name: DATABASE_URL
              value: postgres://$(DB_USER):$(DB_PASS)@$(DB_HOST):$(DB_PORT)/$(DB_NAME)
          readinessProbe:
            httpGet: { path: /health, port: 3000 }
            initialDelaySeconds: 5
            periodSeconds: 5
          livenessProbe:
            httpGet: { path: /health, port: 3000 }
            initialDelaySeconds: 15
            periodSeconds: 10
          resources:
            requests: { cpu: "100m", memory: "128Mi" }
            limits:   { cpu: "500m", memory: "256Mi" }
